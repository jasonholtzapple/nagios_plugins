#!/usr/bin/perl -w
# jason - Fri Aug 19 10:43:45 MST 2011

use strict;
use Getopt::Std;

my $WGET = '/usr/bin/wget';

# Nagios plugin return response
my $RET_OK   = 0;
my $RET_WARN = 1;
my $RET_CRIT = 2;
my $RET_UNK  = 3;
my $ret_val  = 0;

my @response = ();
my %response = ();
my %output   = ();
my %sb       = ();
my $ret      = '';
my $stats    = '';
my $line     = '';
my $key      = '';
my $value    = '';

my %opts;
getopts ('h:p:u:w:c:i:x:', \%opts);

my $OPT_HOST = $opts{h};
my $OPT_PORT = $opts{p} || 80;
my $OPT_URL  = $opts{u} || '/server-status?auto';
my $OPT_WARN = $opts{w};
my $OPT_CRIT = $opts{c};
my $OPT_MIN  = $opts{i};
my $OPT_MAX  = $opts{x};

my %uom = (
    'Total Accesses' => 'c',
    'Total kBytes'   => 'c',
    'Uptime'         => 's',
    'BusyServers'    => '',
    'IdleServers'    => '',
);

my %sb_map = (
    '.' => 'Connecting',
    'C' => 'Closing',
    'E' => 'Hard Error',
    'k' => 'Keepalive',
    'r' => 'Reading',
    'R' => 'Read Post',
    'W' => 'Writing',
    'h' => 'Handling Request',
    'q' => 'Request Start',
    'Q' => 'Request End',
    's' => 'Response Start',
    'S' => 'Response End',
    '_' => 'Waiting',
);

my %warn;
my %crit;
my %min;
my %max;

if ($OPT_WARN) {
    %warn = split /,/, $OPT_WARN;
}
if ($OPT_CRIT) {
    %crit = split /,/, $OPT_CRIT;
}
if ($OPT_MIN) {
    %min = split /,/, $OPT_MIN;
}
if ($OPT_MAX) {
    %max = split /,/, $OPT_MAX;
}

sub usage {
    print STDERR "Usage: $0 -h server -p port (default 80) -u status url (default /server-status?auto) -c comma-separated critical key value pairs -w comma-separated warning key value pairs -i comma-separated minimum key value pairs -x comma-separated maximum key value pairs\nExample: $0 -h 127.0.0.1 -w W,100,C,40 -c W,150,C,60\n";
    exit $RET_UNK;
};

sub trim ($) {
    my ($v) = @_;
    $v =~ s/^\s+//g;
    $v =~ s/\s+$//g;
    return $v;
}

unless ($OPT_HOST && $OPT_PORT && $OPT_URL) {
    usage;
}

@response = qx($WGET -O - http://${OPT_HOST}:${OPT_PORT}${OPT_URL} 2>/dev/null);
foreach $line (@response) {
    chomp ($line);
    ($key, $value) = split /:/, $line;
    $key = trim ($key);
    $value = trim ($value);
    # expand scoreboard line
    if ($line =~ /scoreboard/i) {
        for my $type (keys %sb_map) {
            $response{$sb_map{$type}} = () = $value =~ /(\Q$type\E)/g;
         }
    } else {
        $response{$key} = $value;
    }
}

delete $response{'Scoreboard'};
%output = %response;

foreach (sort keys %response) {
    $ret .= qq($_ $output{$_} );
    if (exists($uom{$_})) {
        $output{$_} .= $uom{$_};
    }
    
    if (exists($warn{$_})) {
        $output{$_} .= ";$warn{$_};";
        if ($response{$_} >= $warn{$_}) {
            $ret_val = $RET_WARN unless $ret_val == $RET_CRIT;
        }
    } else {
        $output{$_} .= ';;';
    }

    if (exists($crit{$_})) {
        $output{$_} .= "$crit{$_};";
        if ($response{$_} >= $crit{$_}) {
            $ret_val = $RET_CRIT;
        }
    } else {
        $output{$_} .= ';';
    }

    if (exists($min{$_})) {
        $output{$_} .= "$min{$_};";
    } else {
        $output{$_} .= ';';
    }

    if (exists($max{$_})) {
        $output{$_} .= "$max{$_}";
    }

    $stats .= qq('$_'=$output{$_} );
}


if ($ret_val == $RET_OK) {
    print "LIGHTTPD STATUS OK|$stats\n";
    exit $RET_OK;
} elsif ($ret_val == $RET_WARN) {
    print "LIGHTTPD STATUS WARNING|$stats\n";
    exit $RET_WARN;
} elsif ($ret_val == $RET_CRIT) {
    print "LIGHTTPD STATUS CRITICAL|$stats\n";
    exit $RET_CRIT;
} else {
    print "LIGHTTPD STATUS UNKNOWN|$stats\n";
    exit $RET_UNK;
}

=pod

sample server-status?auto output

Total Accesses: 2
Total kBytes: 5
Uptime: 112
BusyServers: 1
IdleServers: 127
Scoreboard: h_______________________________________________________________________________________________________________________________
